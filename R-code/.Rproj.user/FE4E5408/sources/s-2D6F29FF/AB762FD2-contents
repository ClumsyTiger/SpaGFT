setwd("e:/Dropbox/my published paper/SVG_jixin/results/02092022-concept proof/simulation/barcode/")

sample_name <- "scenario1_LG_900"
spot_ID <- 41
file_name_spectrum <- paste0("e:/Dropbox/my published paper/SVG_jixin/results/02092022-concept proof/simulation/simulation/",sample_name, "_scoreSpectrum.csv")
file_name_gene_siml <- paste0("e:/Dropbox/my published paper/SVG_jixin/Data/Simulation_FISH_20220203/scenario1/scenario1/",sample_name, ".csv")

expression_df <- read.csv(file_name_gene_siml,header = T) 
spectrum_df <- read.csv(file_name_spectrum,header = T,row.names = 1)
spectrum_df <- spectrum_df[,-1]

all_spec <- as.numeric(unlist(spectrum_df))

spec_range <- c(1:50)

#
# visualize KS
gene_name <- "scenario1_LG_900_SVG_41"
SVG_fourier <- spectrum_df[gene_name,]
all_spec
sample1 = as.numeric(SVG_fourier[spec_range])
sample2 = sample(all_spec,length(spec_range))

group <- c(rep(gene_name, length(sample1)), rep("random", length(sample2)))
dat <- data.frame(KSD = c(sample1,sample2), group = group)
# create ECDF of data
cdf1 <- ecdf(sample1) 
cdf2 <- ecdf(sample2) 
# find min and max statistics to draw line between points of greatest distance
minMax <- seq(min(sample1, sample2), max(sample1, sample2), length.out=length(sample1)) 
x0 <- minMax[which( abs(cdf1(minMax) - cdf2(minMax)) == max(abs(cdf1(minMax) - cdf2(minMax))) )] 
y0 <- cdf1(x0) 
y1 <- cdf2(x0) 
ggplot(dat, aes(x = KSD, group = group, color = group))+
  stat_ecdf(size=1) +
  theme_bw(base_size = 28) +
  theme(legend.position ="top") +
  xlab("FMs") +
  ylab("CDF") +
  #geom_line(size=1) +
  geom_segment(aes(x = x0[1], y = y0[1], xend = x0[1], yend = y1[1]),
               linetype = "dashed", color = "red") +
  geom_point(aes(x = x0[1] , y= y0[1]), color="red", size=8) +
  geom_point(aes(x = x0[1] , y= y1[1]), color="red", size=8) +
  ggtitle(paste0("K-S Test: \n",gene_name," / random")) +
  theme(legend.title=element_blank()) + scale_color_manual(values = c("#f8766d","#00bfc4") ,breaks =c(gene_name,"random") )


# test p-value
# p.value = c()
# n_fre <- 40
# all_value <- unlist(spectrum_df[2:ncol(spectrum_df)])
# for (i in 1:nrow(spectrum_df )){
#   x = spectrum_df[i,2:n_fre]
#   y = as.numeric(sample(all_value,n_fre))
#   ks_test <- ks.test(x,y)
#   p.value_tmp <- ks_test$p.value
#   p.value <- c(p.value, p.value_tmp)
# }
# 
# spectrum_df_withp <- cbind(spectrum_df[,1],p.value,spectrum_df[,2:ncol(spectrum_df)])
# write.csv(spectrum_df_withp,file = "spectrum_df_withp.csv")

SVG_spot_id <- grep("SVG",colnames(expression_df),value = T)[spot_ID]
NULL_spot_id <- grep("NULL",colnames(expression_df),value = T)[spot_ID]

#
x_y <- expression_df[,c("x","y")]


plot_dim_df <- data.frame(row.names = rownames(expression_df),
                          x_y, 
                          SVG_expression = expression_df[,SVG_spot_id],
                          NULL_expression = expression_df[,NULL_spot_id]
                          )

#
library(ggplot2)
library(cowplot)
p_SVG <- ggplot(plot_dim_df, aes(x = x, y = y, color = log1p(SVG_expression))) + 
  geom_point(size  = 2) + 
  scale_color_gradientn(colours = viridis::magma(10)) + theme(legend.position = "none",axis.title=element_blank(),
                                                              axis.text=element_blank(),
                                                              axis.ticks=element_blank())
p_NULL <- ggplot(plot_dim_df, aes(x = x, y = y, color = log1p(NULL_expression))) + 
  geom_point(size  = 2) + 
  scale_color_gradientn(colours = viridis::magma(10)) + theme(legend.position = "none",axis.title=element_blank(),
                                                              axis.text=element_blank(),
                                                              axis.ticks=element_blank())


SVG_fourier <- spectrum_df[paste0(sample_name,"_",SVG_spot_id),]
NULL_fourier <- spectrum_df[paste0(sample_name,"_",NULL_spot_id),]
# 
# barplot(height = as.numeric(SVG_fourier)[2:50])
# barplot(height = as.numeric(NULL_fourier)[2:50])

gg_df <- as.data.frame(cbind(ID = 1:length(as.numeric(SVG_fourier)[2:50]), value = as.numeric(SVG_fourier)[2:50]))
barplot <- ggplot(gg_df, aes( x = ID, y = value)) + geom_col() + theme_void()
bar_code <- ggplot(gg_df, aes( x = ID, y = 1, fill = value)) + 
  geom_tile()+ 
  theme_void()+ scale_fill_gradient(low = "white",high = "black") + theme(legend.position = "none")

gg_NULL_df <- as.data.frame(cbind(ID = 1:length(as.numeric(NULL_fourier)[1:50]), value = as.numeric(NULL_fourier)[1:50]))
barplot_NULL <- ggplot(gg_NULL_df, aes( x = ID, y = value)) + geom_col() + theme_void()
bar_code_NULL <- ggplot(gg_NULL_df, aes( x = ID, y = 1, fill = value)) + 
  geom_tile()+ 
  theme_void()+ scale_fill_gradient(low = "white",high = "black") + theme(legend.position = "none")

library(cowplot)
plot_grid(p_SVG,barplot, bar_code,ncol = 1,rel_heights = c(2,1,1))
plot_grid(p_NULL,barplot_NULL, bar_code_NULL,ncol = 1,rel_heights = c(2,1,1))
# library(zintr)
# SVG_barcode_name <- paste0(sample_name, ".npg")
# barcode_print(as.numeric(SVG_fourier)[1], outfile = "1.npg")
# barcode_print(1, outfile = "1.npg")
# barcode_print(2, outfile = "2.npg")


